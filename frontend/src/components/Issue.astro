---
import { formatRoundAge } from "@lib/formatRoundAge";
import type { IssueSummary } from "@lib/repo-summaries";
import { slo } from "@lib/slo";
import assert from "node:assert";

interface Props {
    issue: IssueSummary;
    // Show the issue's time in a particular category rather than its prioritized SLO time.
    category?: "agenda" | "needsEdits";
}
const { issue, category } = Astro.props;

const { withinSlo, untilSlo, categories } = slo(issue);

const categoryInfo = category && categories[category];

const timeToReport = (function () {
    if (categoryInfo) {
        if (categoryInfo.untilSlo.sign > 0) {
            return categoryInfo.timeUsed;
        }
        return categoryInfo.untilSlo.negated();
    } else {
        if (withinSlo) {
            return issue.sloTimeUsed;
        } else {
            assert.notStrictEqual(issue.whichSlo, "none");
            assert(untilSlo);
            return untilSlo.negated();
        }
    }
})();
---

<a href={issue.url}>{issue.title}</a>: {
    categoryInfo ? (
        categoryInfo.untilSlo.sign !== 1 ? (
            <span class="error">out of SLO</span>
        ) : category === "agenda" ? (
            "on the agenda"
        ) : (
            "has needed edits"
        )
    ) : withinSlo ? (
        "on maintainers' plate"
    ) : (
        <span class="error">out of SLO</span>
    )
} for {formatRoundAge(timeToReport)}

<style is:global>
    .error {
        color: red;
    }
    .warning {
        color: orange;
    }
</style>
