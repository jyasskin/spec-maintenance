---
import { RepoSummary } from "@lib/repo-summaries";
import { slo } from "@lib/slo";
import Layout from "../layouts/Layout.astro";

const repos = (await Astro.glob("../../../scanner/summaries/*/*.json")).map(
    (repo) => RepoSummary.parse(repo)
);

let totalTriageViolations = 0;
let totalUrgentViolations = 0;
let totalImportantViolations = 0;
let totalNeedTriage = 0;
let totalUrgent = 0;
let totalImportant = 0;
let totalOther = 0;

const andFormatter = new Intl.ListFormat("en", {
    style: "long",
    type: "conjunction",
});

const repoSummaries = repos.map((repo) => {
    let triageViolations = 0;
    let urgentViolations = 0;
    let importantViolations = 0;
    let needTriage = 0;
    let urgent = 0;
    let important = 0;
    let other = 0;
    for (const issue of repo.issues) {
        const sloStatus = slo(issue);
        switch (sloStatus.whichSlo) {
            case "triage":
                if (sloStatus.withinSlo) {
                    needTriage++;
                } else {
                    triageViolations++;
                }
                break;
            case "urgent":
                if (sloStatus.withinSlo) {
                    urgent++;
                } else {
                    urgentViolations++;
                }
                break;
            case "important":
                if (sloStatus.withinSlo) {
                    important++;
                } else {
                    importantViolations++;
                }
                break;
            case "none":
                other++;
        }
    }
    totalTriageViolations += triageViolations;
    totalUrgentViolations += urgentViolations;
    totalImportantViolations += importantViolations;
    totalNeedTriage += needTriage;
    totalUrgent += urgent;
    totalImportant += important;
    totalOther += other;

    let message: string[] = [];
    if (triageViolations > 0 || urgentViolations > 0) {
        if (triageViolations > 0) {
            message.push(`${triageViolations} triage SLO violations`);
        }
        if (urgentViolations > 0) {
            message.push(`${urgentViolations} urgent SLO violations`);
        }
    } else if (importantViolations > 0) {
        message.push(`${importantViolations} important SLO violations`);
    } else if (needTriage > 0 || urgent > 0) {
        if (needTriage > 0) {
            message.push(`${needTriage} issues that need triage`);
        }
        if (urgent > 0) {
            message.push(`${urgent} urgent issues`);
        }
    } else if (important > 0) {
        message.push(`${important} important issues`);
    }

    return Object.assign({}, repo, {
        triageViolations,
        urgentViolations,
        importantViolations,
        needTriage,
        urgent,
        important,
        other,
        class_:
            triageViolations > 0 || urgentViolations > 0
                ? "error"
                : importantViolations > 0
                ? "warning"
                : "",
        message: andFormatter.format(message),
    });
});

function sortKey(summary: (typeof repoSummaries)[0]): {
    priority: number;
    count: number;
} {
    if (summary.triageViolations > 0 || summary.urgentViolations > 0) {
        return {
            priority: 4,
            count: summary.triageViolations + summary.urgentViolations,
        };
    } else if (summary.importantViolations > 0) {
        return { priority: 3, count: summary.importantViolations };
    } else if (summary.needTriage > 0 || summary.urgent > 0) {
        return { priority: 2, count: summary.needTriage + summary.urgent };
    } else if (summary.important > 0) {
        return { priority: 1, count: summary.important };
    } else {
        return { priority: 0, count: summary.other };
    }
}
function compareByKey(
    a: (typeof repoSummaries)[0],
    b: (typeof repoSummaries)[0]
): number {
    const aKey = sortKey(a),
        bKey = sortKey(b);
    if (aKey.priority != bKey.priority) {
        return bKey.priority - aKey.priority;
    }
    return bKey.count - aKey.count;
}
repoSummaries.sort(compareByKey);
---

<Layout title="Browser Spec Maintenance Status">
    <main>
        <h1>Browser Spec Maintenance Status</h1>

        <p>Across all browser specs, we have:</p>
        <ul>
            {
                totalTriageViolations > 0 ? (
                    <li class="error">
                        {totalTriageViolations} issues outside of the triage SLO
                    </li>
                ) : null
            }
            {
                totalUrgentViolations > 0 ? (
                    <li class="error">
                        {totalUrgentViolations} urgent issues outside of their
                        SLO
                    </li>
                ) : null
            }
            {
                totalImportantViolations > 0 ? (
                    <li class="warning">
                        {totalImportantViolations} important issues outside of
                        their SLO
                    </li>
                ) : null
            }
            {
                totalNeedTriage > 0 ? (
                    <li>{totalNeedTriage} issues that need triage</li>
                ) : null
            }
            {totalUrgent > 0 ? <li>{totalUrgent} urgent issues</li> : null}
            {
                totalImportant > 0 ? (
                    <li>{totalImportant} important issues</li>
                ) : null
            }
            {totalOther > 0 ? <li>{totalOther} other issues</li> : null}
        </ul>

        <dl>
            {
                repoSummaries.map((repo) => (
                    <>
                        <dt class={repo.class_}>
                            <a href={`${repo.org}/${repo.repo}`}>
                                {repo.org}/{repo.repo}
                            </a>
                        </dt>
                        <dd>
                            <span class={repo.class_}>{repo.message}</span>
                            {repo.labelsPresent ? null : (
                                <p>
                                    This repository is missing its{" "}
                                    <a href="triage-labels">triage labels</a>.
                                </p>
                            )}
                        </dd>
                    </>
                ))
            }
        </dl>
    </main>
</Layout>

<style is:global>
    .error {
        color: red;
    }
    .warning {
        color: orange;
    }
</style>
