---
import { englishUtcFormatter } from "@lib/formatTime";
import { IssueSummary } from "@lib/repo-summaries";
import { agendaLengthSLO, groupBySlo } from "@lib/slo";
import { getCollection } from "astro:content";
import assert from "node:assert";
import LinkIfNonzero from "../components/LinkIfNonzero.astro";
import YesNoCell from "../components/YesNoCell.astro";
import Layout from "../layouts/Layout.astro";

const repos = await getCollection("github");

let oldestCache: Date;
let newestCache = (oldestCache = new Date(repos[0].data.cachedAt));
for (const repo of repos) {
    const repoCachedAt = new Date(repo.data.cachedAt);
    if (repoCachedAt < oldestCache) {
        oldestCache = repoCachedAt;
    }
    if (repoCachedAt > newestCache) {
        newestCache = repoCachedAt;
    }
}
assert(oldestCache <= newestCache);

let totalTriageViolations = 0;
let totalUrgentViolations = 0;
let totalSoonViolations = 0;
let totalAgendaViolations = 0;
let totalNeedTriage = 0;
let totalUrgent = 0;
let totalSoon = 0;
let totalAgenda = 0;
let totalOther = 0;
let totalGroupsOverAgendaLimit = 0;

const repoSummaries = repos.map((repo) => {
    const groups = groupBySlo(IssueSummary.array().parse(repo.data.issues));

    const triageViolations = groups.triageViolations.length;
    const urgentViolations = groups.urgentViolations.length;
    const soonViolations = groups.soonViolations.length;
    const agendaViolations = groups.agendaViolations.length;
    const needTriage = groups.untriaged.length;
    const urgent = groups.urgent.length;
    const soon = groups.soon.length;
    const agenda = groups.agenda.length;
    const other = groups.other.length;

    totalTriageViolations += triageViolations;
    totalUrgentViolations += urgentViolations;
    totalSoonViolations += soonViolations;
    totalAgendaViolations += agendaViolations;
    totalNeedTriage += needTriage;
    totalUrgent += urgent;
    totalSoon += soon;
    totalAgenda += agenda;
    totalOther += other;
    if (agenda + agendaViolations > agendaLengthSLO) {
        totalGroupsOverAgendaLimit++;
    }

    return Object.assign({}, repo, {
        triageViolations,
        urgentViolations,
        soonViolations,
        agendaViolations,
        needTriage,
        urgent,
        soon,
        agenda,
        other,
    });
});

function sortKey(summary: (typeof repoSummaries)[0]): {
    priority: number;
    count: number;
} {
    if (summary.triageViolations > 0 || summary.urgentViolations > 0) {
        return {
            priority: 4,
            count: summary.triageViolations + summary.urgentViolations,
        };
    } else if (
        summary.soonViolations > 0 ||
        summary.agendaViolations > 0 ||
        summary.agenda + summary.agendaViolations > agendaLengthSLO
    ) {
        let agendaIfTooMany = 0;
        if (summary.agenda + summary.agendaViolations > agendaLengthSLO) {
            agendaIfTooMany = summary.agenda;
        }
        return {
            priority: 3,
            count:
                summary.soonViolations +
                summary.agendaViolations +
                agendaIfTooMany,
        };
    } else if (summary.needTriage > 0 || summary.urgent > 0) {
        return { priority: 2, count: summary.needTriage + summary.urgent };
    } else if (summary.soon > 0 || summary.agenda > 0) {
        return { priority: 1, count: summary.soon + summary.agenda };
    } else {
        return { priority: 0, count: summary.other };
    }
}
function compareByKey(
    a: (typeof repoSummaries)[0],
    b: (typeof repoSummaries)[0]
): number {
    const aKey = sortKey(a),
        bKey = sortKey(b);
    if (aKey.priority != bKey.priority) {
        return bKey.priority - aKey.priority;
    }
    return bKey.count - aKey.count;
}
repoSummaries.sort(compareByKey);
---

<script>
    //
    import "@components/local-time.js";
import "sortable-tablesort/sortable.min.js";
</script>

<Layout title="Browser Spec Maintenance Status">
    <main>
        <h1>Browser Spec Maintenance Status</h1>

        <p>
            Last updated <local-time
                from={oldestCache.toISOString()}
                to={newestCache.toISOString()}
                >{
                    englishUtcFormatter.formatRange(oldestCache, newestCache)
                }</local-time
            >.
        </p>

        <p>Across all browser specs, we have:</p>
        <ul>
            {
                totalTriageViolations > 0 ? (
                    <li class="error">
                        {totalTriageViolations} issues outside of the triage SLO
                    </li>
                ) : null
            }
            {
                totalUrgentViolations > 0 ? (
                    <li class="error">
                        {totalUrgentViolations} urgent issues outside of their
                        SLO
                    </li>
                ) : null
            }
            {
                totalSoonViolations > 0 ? (
                    <li class="warning">
                        {totalSoonViolations} soon-priority issues outside of
                        their SLO
                    </li>
                ) : null
            }
            {
                totalAgendaViolations > 0 ? (
                    <li class="warning">
                        {totalAgendaViolations} issues on the agenda outside of
                        their SLO
                    </li>
                ) : null
            }
            {
                totalGroupsOverAgendaLimit > 0 ? (
                    <li class="warning">
                        {totalGroupsOverAgendaLimit} group(s) with too many
                        issues on the agenda
                    </li>
                ) : null
            }
            {
                totalNeedTriage > 0 ? (
                    <li>{totalNeedTriage} issues that need triage</li>
                ) : null
            }
            {totalUrgent > 0 ? <li>{totalUrgent} urgent issues</li> : null}
            {totalSoon > 0 ? <li>{totalSoon} soon-priority issues</li> : null}
            {
                totalAgenda > 0 ? (
                    <li>{totalAgenda} issues on the agenda</li>
                ) : null
            }
            {totalOther > 0 ? <li>{totalOther} other issues</li> : null}
        </ul>

        <table class="data">
            <thead>
                <tr>
                    <th rowspan="2">Repository</th>
                    <th rowspan="2"
                        ><a href={`${import.meta.env.BASE_URL}about#priorities`}
                            >Labels present</a
                        ></th
                    >
                    <th colspan="2">Issues that need triage</th>
                    <th colspan="2">Urgent issues</th>
                    <th colspan="2">Issues due soon</th>
                    <th colspan="2">Agenda items</th>
                    <th rowspan="2">Other issues</th>
                </tr>
                <tr>
                    <th>Late</th>
                    <th></th>
                    <th>Late</th>
                    <th></th>
                    <th>Late</th>
                    <th></th>
                    <th>Late</th>
                    <th></th>
                </tr>
            </thead>
            {
                repoSummaries.map((repo) => (
                    <tr>
                        <th>
                            <a href={`${repo.data.org}/${repo.data.repo}`}>
                                {repo.data.org}/{repo.data.repo}
                            </a>
                        </th>
                        <YesNoCell value={repo.data.labelsPresent} />
                        <td
                            class={
                                repo.triageViolations === 0 ? "good" : "error"
                            }
                        >
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#untriaged`}
                                value={repo.triageViolations}
                            />
                        </td>
                        <td>
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#untriaged`}
                                value={repo.needTriage}
                            />
                        </td>
                        <td
                            class={
                                repo.urgentViolations === 0 ? "good" : "error"
                            }
                        >
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#urgent`}
                                value={repo.urgentViolations}
                            />
                        </td>
                        <td>
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#urgent`}
                                value={repo.urgent}
                            />
                        </td>
                        <td
                            class={
                                repo.soonViolations === 0 ? "good" : "warning"
                            }
                        >
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#soon`}
                                value={repo.soonViolations}
                            />
                        </td>
                        <td>
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#soon`}
                                value={repo.soon}
                            />
                        </td>
                        <td
                            class={
                                repo.agendaViolations === 0 ? "good" : "warning"
                            }
                        >
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#agenda`}
                                value={repo.agendaViolations}
                            />
                        </td>
                        <td
                            class={
                                repo.agendaViolations + repo.agenda <=
                                agendaLengthSLO
                                    ? "good"
                                    : "warning"
                            }
                        >
                            <LinkIfNonzero
                                href={`${repo.data.org}/${repo.data.repo}#agenda`}
                                value={repo.agenda}
                            />
                        </td>
                        <td>{repo.other}</td>
                    </tr>
                ))
            }
        </table>
    </main>
</Layout>
