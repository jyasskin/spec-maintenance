---
import Layout from "@layouts/Layout.astro";
---

<Layout title="Your Group's Spec Maintenance Status">
    <!-- Inline to get the fetches going as early as possible. -->
    <script is:inline>
        const params = new URLSearchParams(location.search);
        window.repos = params
            .getAll("repos")
            .flatMap((value) => value.split(","));
        window.jsonFetches = repos.map((repoName) =>
            fetch(`${import.meta.env.BASE_URL}${repoName}.json`)
        );
    </script>
    <nav>
        Your group is responsible for:
        <ul></ul>
    </nav>
    <main class="loading">
        <p class="while-loading">Loading...</p>
        <label
            ><input type="checkbox" id="showWithinSlo" />Show all issues</label
        >
        <sm-issues-by-category category="triage"></sm-issues-by-category>
        <sm-issues-by-category category="urgent"></sm-issues-by-category>
        <sm-issues-by-category category="important"></sm-issues-by-category>
        <sm-issues-by-category category="other"></sm-issues-by-category>
    </main>
    <style is:global>
        .loading * {
            display: none;
        }
        .while-loading {
            display: none;
        }
        .loading .while-loading {
            display: initial;
        }
        label:has(#showWithinSlo:checked) ~ sm-issues-by-category {
            --only-out-of-slo-display: none;
        }
        label:has(#showWithinSlo:not(:checked)) ~ sm-issues-by-category {
            --within-slo-display: none;
        }
    </style>
</Layout>

<script>
    import "@components/sm-issues-by-category";

    import type { IssuesByCategory } from "@components/sm-issues-by-category";
import { RepoJson } from "@lib/published-json";

    declare global {
        // Created in the inline script above.
        var repos: string[];
        var jsonFetches: Promise<Response>[];
    }
    const fetches = window.jsonFetches.map(async (jsonFetch) =>
        RepoJson.parse(await (await jsonFetch).json())
    );
    Promise.all(fetches)
        .then(() => document.querySelector("main")!.classList.remove("loading"))
        .catch((e) => {
            console.error(e);
            document.querySelector("p.while-loading")!.textContent =
                "Error! Check the console.";
        });

    for (const elem of document.querySelectorAll("sm-issues-by-category")) {
        (elem as IssuesByCategory).allIssues = fetches;
    }

    document.querySelector("nav>ul")?.replaceChildren(
        ...window.repos.map((repoName) => {
            const link = document.createElement("a");
            link.href = `${import.meta.env.BASE_URL}${repoName}`;
            link.textContent = repoName;
            const item = document.createElement("li");
            item.append(link);
            return item;
        })
    );
</script>
