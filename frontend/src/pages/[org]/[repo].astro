---
import Issue from "@components/Issue.astro";
import Layout from "@layouts/Layout.astro";
import { cmpByTimeUsed, groupBySlo } from "@lib/slo";
import type {
GetStaticPaths,
InferGetStaticParamsType,
InferGetStaticPropsType,
} from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths = (async () => {
    const repos = await getCollection("github");
    return repos.map((repo) => ({
        params: { org: repo.data.org, repo: repo.data.repo },
        props: { details: repo.data },
    }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { org, repo } = Astro.params as Params;
const { details } = Astro.props as Props;

const {
    untriaged,
    triageViolations,
    important,
    importantViolations,
    urgent,
    urgentViolations,
} = groupBySlo(details.issues);
urgent.push(...urgentViolations);
urgent.sort(cmpByTimeUsed);
important.push(...importantViolations);
important.sort(cmpByTimeUsed);
untriaged.push(...triageViolations);
untriaged.sort(cmpByTimeUsed);
---

<Layout title={`${org}/${repo} Issues`}>
    <h1>
        <a href=`https://github.com/${org}/${repo}/issues`
            >{org}/{repo} Issues</a
        >
    </h1>

    {
        details.labelsPresent ? null : (
            <p>
                This repository needs to add the{" "}
                <a href="/triage-labels">triage labels</a>.
            </p>
        )
    }

    <ul>
        {
            untriaged.length > 0 ? (
                <li>
                    <a href="#untriaged">
                        {triageViolations.length
                            ? `${triageViolations.length} out-of-SLO untriaged issues`
                            : `${untriaged.length} untriaged issues`}
                    </a>
                </li>
            ) : null
        }
        {
            urgent.length > 0 ? (
                <li>
                    <a href="#urgent">
                        {urgentViolations.length
                            ? `${urgentViolations.length} out-of-SLO urgent issues`
                            : `${urgent.length} urgent issues`}
                    </a>
                </li>
            ) : null
        }
        {
            important.length > 0 ? (
                <li>
                    <a href="#important">
                        {importantViolations.length
                            ? `${importantViolations.length} out-of-SLO important issues`
                            : `${important.length} important issues`}
                    </a>
                </li>
            ) : null
        }
    </ul>

    {
        untriaged.length > 0 ? (
            <>
                <h2 id="untriaged">Untriaged</h2>
                <ul>
                    {untriaged.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        urgent.length > 0 ? (
            <>
                <h2 id="urgent">Urgent</h2>
                <ul>
                    {urgent.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        important.length > 0 ? (
            <>
                <h2 id="important">Important</h2>
                <ul>
                    {important.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }
</Layout>
