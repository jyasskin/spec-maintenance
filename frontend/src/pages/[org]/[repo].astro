---
import Issue from "@components/Issue.astro";
import { Temporal } from "@js-temporal/polyfill";
import Layout from "@layouts/Layout.astro";
import { IssueSummary, RepoSummary } from "@lib/repo-summaries";
import { slo } from "@lib/slo";
import type {
GetStaticPaths,
InferGetStaticParamsType,
InferGetStaticPropsType,
} from "astro";

export const getStaticPaths = (async () => {
    const repos = RepoSummary.array().parse(
        await Astro.glob("../../../../scanner/summaries/*/*.json")
    );
    return repos.map((repo) => ({
        params: { org: repo.org, repo: repo.repo },
        props: { details: repo },
    }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { org, repo } = Astro.params as Params;
const { details } = Astro.props as Props;

const untriaged: IssueSummary[] = [];
const urgent: IssueSummary[] = [];
const important: IssueSummary[] = [];
let triageViolations = 0;
let urgentViolations = 0;
let importantViolations = 0;

for (const issue of details.issues) {
    const { whichSlo, withinSlo } = slo(issue);
    switch (whichSlo) {
        case "urgent":
            urgent.push(issue);
            if (!withinSlo) {
                urgentViolations++;
            }
            break;
        case "important":
            important.push(issue);
            if (!withinSlo) {
                importantViolations++;
            }
            break;
        case "triage":
            untriaged.push(issue);
            if (!withinSlo) {
                triageViolations++;
            }

            break;
    }
}

function cmpByTimeUsed(a: IssueSummary, b: IssueSummary) {
    return Temporal.Duration.compare(b.sloTimeUsed, a.sloTimeUsed);
}
urgent.sort(cmpByTimeUsed);
important.sort(cmpByTimeUsed);
untriaged.sort(cmpByTimeUsed);
---

<Layout title={`${org}/${repo} Issues`}>
    <h1>
        <a href=`https://github.com/${org}/${repo}/issues`
            >{org}/{repo} Issues</a
        >
    </h1>

    {
        details.labelsPresent ? null : (
            <p>
                This repository needs to add the{" "}
                <a href="/triage-labels">triage labels</a>.
            </p>
        )
    }

    <ul>
        {
            untriaged.length > 0 ? (
                <li>
                    <a href="#untriaged">
                        {triageViolations
                            ? `${triageViolations} out-of-SLO untriaged issues`
                            : `${untriaged.length} untriaged issues`}
                    </a>
                </li>
            ) : null
        }
        {
            urgent.length > 0 ? (
                <li>
                    <a href="#urgent">
                        {urgentViolations
                            ? `${urgentViolations} out-of-SLO urgent issues`
                            : `${urgent.length} urgent issues`}
                    </a>
                </li>
            ) : null
        }
        {
            important.length > 0 ? (
                <li>
                    <a href="#important">
                        {importantViolations
                            ? `${importantViolations} out-of-SLO important issues`
                            : `${important.length} important issues`}
                    </a>
                </li>
            ) : null
        }
    </ul>

    {
        untriaged.length > 0 ? (
            <>
                <h2 id="untriaged">Untriaged</h2>
                <ul>
                    {untriaged.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        urgent.length > 0 ? (
            <>
                <h2 id="urgent">Urgent</h2>
                <ul>
                    {urgent.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        important.length > 0 ? (
            <>
                <h2 id="important">Important</h2>
                <ul>
                    {important.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }
</Layout>
