---
import GhLabel from "@components/GhLabel.astro";
import Issue from "@components/Issue.astro";
import Layout from "@layouts/Layout.astro";
import { IssueSummary } from "@lib/repo-summaries";
import { cmpByAgendaUsed, cmpByTimeUsed, groupBySlo } from "@lib/slo";
import * as ghLabels from "@lib/triage-labels";
import type {
GetStaticPaths,
InferGetStaticParamsType,
InferGetStaticPropsType,
} from "astro";
import { getCollection } from "astro:content";

export const getStaticPaths = (async () => {
    const repos = await getCollection("github");
    return repos.map((repo) => ({
        params: { org: repo.data.org, repo: repo.data.repo },
        props: { details: repo.data },
    }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { org, repo } = Astro.params as Params;
const { details } = Astro.props as Props;

const {
    untriaged,
    triageViolations,
    agenda,
    agendaViolations,
    soon,
    soonViolations,
    urgent,
    urgentViolations,
} = groupBySlo(IssueSummary.array().parse(details.issues));
urgent.push(...urgentViolations);
urgent.sort(cmpByTimeUsed);
soon.push(...soonViolations);
soon.sort(cmpByTimeUsed);
agenda.push(...agendaViolations);
agenda.sort(cmpByAgendaUsed);
untriaged.push(...triageViolations);
untriaged.sort(cmpByTimeUsed);
---

<Layout title={`${org}/${repo} Issues`}>
    <h1>
        <a href=`https://github.com/${org}/${repo}/issues`
            >{org}/{repo} Issues</a
        >
    </h1>

    {
        details.labelsPresent ? null : (
            <p>
                This repository doesn't have the
                <GhLabel {...ghLabels.eventually} /> label that's used to mark
                an issue as triaged without giving it an SLO. Until that's
                added, this summary uses heuristics to guess if each issue has
                been triaged.
            </p>
        )
    }

    <ul>
        {
            untriaged.length > 0 ? (
                <li>
                    <a href="#untriaged">
                        {triageViolations.length
                            ? `${triageViolations.length} out-of-SLO untriaged issues`
                            : `${untriaged.length} untriaged issues`}
                    </a>
                </li>
            ) : null
        }
        {
            urgent.length > 0 ? (
                <li>
                    <a href="#urgent">
                        {urgentViolations.length
                            ? `${urgentViolations.length} out-of-SLO urgent issues`
                            : `${urgent.length} urgent issues`}
                    </a>
                </li>
            ) : null
        }
        {
            agenda.length > 0 ? (
                <li>
                    <a href="#agenda">
                        {agendaViolations.length
                            ? `${agendaViolations.length} issues on the agenda that have been waiting too long`
                            : `${agenda.length} issues on the agenda`}
                    </a>
                </li>
            ) : null
        }
        {
            soon.length > 0 ? (
                <li>
                    <a href="#soon">
                        {soonViolations.length
                            ? `${soonViolations.length} out-of-SLO soon-priority issues`
                            : `${soon.length} soon-priority issues`}
                    </a>
                </li>
            ) : null
        }
    </ul>

    {
        untriaged.length > 0 ? (
            <>
                <h2 id="untriaged">Untriaged</h2>
                <ul>
                    {untriaged.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        urgent.length > 0 ? (
            <>
                <h2 id="urgent">Urgent</h2>
                <ul>
                    {urgent.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        agenda.length > 0 ? (
            <>
                <h2 id="agenda">Agenda</h2>
                <ul>
                    {agenda.map((issue) => (
                        <li>
                            <Issue {issue} agenda />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }

    {
        soon.length > 0 ? (
            <>
                <h2 id="soon">Soon</h2>
                <ul>
                    {soon.map((issue) => (
                        <li>
                            <Issue {issue} />
                        </li>
                    ))}
                </ul>
            </>
        ) : null
    }
</Layout>
