name: Publish to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # And daily at 21:42 US-Pacific:
  schedule:
    - cron: '42 5 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm
      - name: Restore Scan Results Cache
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: frontend/src/content/github
          # Always replace the cache when its schema changes, but save a new version on each run.
          key: ${{ hashFiles('frontend/src/lib/repo-summaries.ts') }}-${{ github.run_id }}
          restore-keys: |
            ${{ hashFiles('frontend/src/lib/repo-summaries.ts') }}-
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: pnpm install
      - name: Scan specification repositories
        run: pnpm scan --gh-token '${{ secrets.GITHUB_TOKEN }}'
      - name: Save Scan Results Cache
        uses: actions/cache/save@v4
        # Save the cache even if the overall scan failed.
        if: always()
        with:
          path: frontend/src/content/github
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}
      - name: Build with Astro
        run: |
          pnpm astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
